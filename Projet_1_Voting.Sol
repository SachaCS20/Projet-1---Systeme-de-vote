// SPDX-License-Identifier: GPL-3.0

pragma solidity 0.8.17;
import "https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/access/Ownable.sol";

contract Voting is Ownable {

    enum WorkflowStatus {
        RegisteringVoters,
        ProposalsRegistrationStarted,
        ProposalsRegistrationEnded,
        VotingSessionStarted,
        VotingSessionEnded,
        VotesTallied
    }

    struct Voter {
        bool isRegistered;
        bool hasVoted;
        uint votedProposalId;
    }

    struct Proposal {
        string description;
        uint voteCount;
    }

    mapping (address => Voter) voters;
    Proposal[] proposals;
    WorkflowStatus status;
    uint winningProposalId;

    event VoterRegistered(address voterAddress);
    event WorkflowStatusChange(WorkflowStatus previousStatus, WorkflowStatus newStatus);
    event ProposalRegistered(uint proposalId);
    event Voted(address voter, uint proposalId);


    //Pre-authorize the admin address (the address which deploy the contract)
    constructor(){
        //whitelist the deployer address
        voters[msg.sender].isRegistered = true;
    }

    function whitelist(address _voter) public onlyOwner {
        require(status == WorkflowStatus.RegisteringVoters, "Not in voter whitelisting phase");
        require(!voters[_voter].isRegistered, "Voter already whitelisted");
        voters[_voter].isRegistered = true;
        emit VoterRegistered(_voter);
    }

    // Starts the proposal registration session
    function startProposalRegistrationSession() public onlyOwner {
        require(status == WorkflowStatus.RegisteringVoters, "Not in voter whitelisting phase");
        status = WorkflowStatus.ProposalsRegistrationStarted;
        emit WorkflowStatusChange(WorkflowStatus.RegisteringVoters, WorkflowStatus.ProposalsRegistrationStarted);
    }


    // Submits a proposal
    function submitProposal(string memory _description) public {
        require(status == WorkflowStatus.ProposalsRegistrationStarted, "Proposal registration has not started yet.");
        require(voters[msg.sender].isRegistered, "Voter not whitelisted");
        uint proposalId = proposals.length;
        proposals.push(Proposal(_description, 0));
        emit ProposalRegistered(proposalId);
    }


    // Ends the proposal registration session
    function endProposalRegistrationSession() public onlyOwner {
        require(status == WorkflowStatus.ProposalsRegistrationStarted, "Proposal registration has not started yet");
        status = WorkflowStatus.ProposalsRegistrationEnded;
        emit WorkflowStatusChange(WorkflowStatus.ProposalsRegistrationStarted, WorkflowStatus.ProposalsRegistrationEnded);
    }

    // Starts the voting session
    function startVotingSession() public onlyOwner {
        require(status == WorkflowStatus.ProposalsRegistrationEnded, "Proposal registration has not ended yet");
        status = WorkflowStatus.VotingSessionStarted;
        emit WorkflowStatusChange(WorkflowStatus.ProposalsRegistrationEnded, WorkflowStatus.VotingSessionStarted);
    }


    // Allows registered voters to vote for a proposal
    function vote(uint proposalId) public {
        require(status == WorkflowStatus.VotingSessionStarted, "Voting session has not started yet");
        require(voters[msg.sender].isRegistered, "Voter is not whitelisted");
        require(!voters[msg.sender].hasVoted, "Voter has already voted");
        require(proposalId <= proposals.length, "Invalid proposalId");
        Proposal storage proposal = proposals[proposalId - 1];
        proposal.voteCount++;
        voters[msg.sender].hasVoted = true;
        voters[msg.sender].votedProposalId = proposalId;
        emit Voted(msg.sender, proposalId);
    }


    // End the voting session
    function endVotingSession() public onlyOwner {
        require(status == WorkflowStatus.VotingSessionStarted, "Voting session has not ended yet");
        status = WorkflowStatus.VotingSessionEnded;
        emit WorkflowStatusChange(WorkflowStatus.VotingSessionStarted, WorkflowStatus.VotingSessionEnded);
    }



    function tallyVotes() public onlyOwner {
        require(status == WorkflowStatus.VotingSessionEnded, "Voting session has not ended");
        uint winningVoteCount = 0;
        for (uint i = 0; i < proposals.length; i++) {
            Proposal storage proposal = proposals[i];
            if (proposal.voteCount > winningVoteCount) {
                winningProposalId = i + 1;
                winningVoteCount = proposal.voteCount;
            }
        }
        status = WorkflowStatus.VotesTallied;
        emit WorkflowStatusChange(WorkflowStatus.VotingSessionEnded, WorkflowStatus.VotesTallied);
    }


    function getWinner() public view returns (uint) {
        require(status == WorkflowStatus.VotesTallied, "Votes have not been tallied");
        return winningProposalId;
    }


}
